import os
import time

import torch
from torch.utils.data import DataLoader

from dataset import Net2Data
from hparams import hparam as hp
from models import Net1, Net2
from net2_train_eval_convert import convert as net2_test
from utils import load_logdir, get_logger, count_parameters
import logging

'''
Call net2_train_eval_convert.convert()
'''
def convert(logdir_train1, logdir_train2, logdir_convert):
    # Load model net1
    net1_model = Net1(hp.default.phns_len)
    checkpoint_path1 = '{}/checkpoint.tar'.format(logdir_train1)
    checkpoint1 = torch.load(checkpoint_path1)
    if checkpoint1:
        net1_model.load_state_dict(checkpoint1['model_state_dict'])

    # Load model net2
    net2_model = Net2()
    checkpoint_path2 = '{}/checkpoint.tar'.format(logdir_train2)
    checkpoint2 = torch.load(checkpoint_path2)
    if checkpoint2:
        net2_model.load_state_dict(checkpoint2['model_state_dict'])

    # Create test loader
    test_list = []
    test_list_file = '{}/test_list.txt'.format(logdir_train2)
    data_path = hp.convert.data_path
    source_dir = os.path.dirname(data_path)
    source_speaker = os.path.basename(source_dir)

    with open(test_list_file, 'r') as f:
        for line in f:
            file_name = os.path.basename(line.rstrip())
            target_speaker = file_name.split('_')[0]
            file_name = file_name.replace(target_speaker, source_speaker)
            source_file = os.path.join(source_dir, file_name)
            test_list.append(source_file)
    test_set = Net2Data(test_list)
    test_loader = DataLoader(test_set, batch_size=hp.convert.batch_size, shuffle=False, drop_last=False)
    logger.debug("Number of files to convert: {} samples".format(test_set.size))
    logger.debug('batch_size: {}'.format(hp.convert.batch_size))
    logger.debug('shuffle=False')
    logger.debug('drop_last=False')
    net2_test(net1_model, net2_model, test_loader, logdir_train2, logdir_convert)
    net1_num_params = count_parameters(net1_model)
    net2_num_params = count_parameters(net2_model)
    logger.debug('Network 1 number of params: {}'.format(net1_num_params))
    logger.debug('Network 2 number of params: {}'.format(net2_num_params))

if __name__ == '__main__':
    config_name = 'config'
    hp.set_hparam_yaml(config_name)
    log_dict = load_logdir()
    logger = get_logger('CONVERT', log_dict['convert'])
    logger.info('configuration: {},logdir: {}'.format(config_name, log_dict['train2']))
    logger.info(hp.hparams_debug_string(hp.convert))
    start = time.time()
    convert(log_dict['train1'], log_dict['train2'], log_dict['convert'])
    logger.info("Done")
    end = time.time()
    logger.info("Conversion took {} s.".format(end - start))